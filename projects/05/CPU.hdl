// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // i = instruction[15].
    // a = instruction[12].
    // c = instruction[6..11].
    // d = instruction[3..5].
    // j = instruction[0..2].

    // isLoadA = (i == 0) || (d3 == 1);
    Not(in = instruction[15], out = isInstructionA);
    Or(a = isInstructionA, b = instruction[5], out = isLoadA);
    Mux16(a = instruction, b = outAlu, sel = instruction[15], out = inA);
    ARegister(in = inA, load = isLoadA, out = outA, out[0..14] = addressM);

    // isLoadD = (i == 1) && (d2 == 1);
    And(a = instruction[15], b = instruction[4], out = isLoadD);
    DRegister(in = outAlu, load = isLoadD, out = outD);

    // Select Register A value or Memory value based on a bit in the instruction.
    Mux16(a = outA, b = inM, sel = instruction[12], out = outAM);

    ALU(
            x   = outD,
            y   = outAM,
            zx  = instruction[11], // zero the x input?
            nx  = instruction[10], // negate the x input?
            zy  = instruction[9],  // zero the y input?
            ny  = instruction[8],  // negate the y input?
            f   = instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
            no  = instruction[6],  // negate the out output?
            out = outAlu,          // 16-bit output
            out = outM,
            zr  = isZero,          // 1 if (out == 0), 0 otherwise
            ng  = isNegetive       // 1 if (out < 0),  0 otherwise
       );

    And(a = instruction[15], b = instruction[3], out = writeM);

    // Check conditional jump.
    Nor(a = isZero, b = isNegetive, out = isPositive);
    And(a = instruction[0], b = isPositive, out = j3);
    And(a = instruction[1], b = isZero, out = j2);
    And(a = instruction[2], b = isNegetive, out = j1);
    Or3(
            a = j1,
            b = j2,
            c = j3,
            out = conditionalJump
       );

    // Check unconditional jump.
    And3(
            a = instruction[0],
            b = instruction[1],
            c = instruction[2],
            out = unconditionalJump
        );

    Or(a = unconditionalJump, b = conditionalJump, out = isJump0);
    And(a = isJump0, b = instruction[15], out = isJump);

    PC(in = outA, load = isJump, inc = true, reset = reset, out[0..14] = pc);
}
